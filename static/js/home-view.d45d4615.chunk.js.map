{"version":3,"sources":["services/fetchMovies.js","images/default-opt.jpg","services/formatData.js","components/MovieCard/MovieCard.module.css","components/MoviesList/MoviesList.module.css","components/MovieCard/MovieCard.jsx","components/MoviesList/MoviesList.jsx","views/HomeView.js"],"names":["key","request","requestStr","a","axios","get","then","res","data","catch","console","error","fetchResult","fetchMovies","requestMovieDetails","movieId","requestTrendMovies","requestSearchMovie","query","formatData","poster_path","release_date","genres","vote_average","otherInfo","imgUrl","defaultImg","release_year","slice","genresList","map","elem","name","join","score","module","exports","MovieCard","movieInfo","title","className","styles","movie__thumb","src","alt","movie__text","withRouter","movies","location","id","movies__item","to","pathname","routes","state","from","HomeView","response","log","results","this","setState","Component"],"mappings":"uLAEMA,EAAM,mCAeNC,EAAO,uCAAG,WAAMC,GAAN,eAAAC,EAAA,sEACYC,IACvBC,IAAIH,GACJI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBC,MAAMC,QAAQC,OAJH,cACRC,EADQ,yBAKPA,GALO,2CAAH,sDAQPC,EAAc,CAClBC,oBAtB0B,SAAAC,GAC1B,IAAMb,EAAU,6CAAyCa,EAAzC,oBAA4Df,EAA5D,uCAChB,OAAOC,EAAQC,IAqBfc,mBAnByB,WACzB,IAAMd,EAAU,mEAA+DF,EAA/D,qBAChB,OAAOC,EAAQC,IAkBfe,mBAhByB,SAAAC,GACzB,IAAMhB,EAAU,4DAAwDF,EAAxD,yBAA4EkB,EAA5E,qBAChB,OAAOjB,EAAQC,KAiBFW,O,oDC/BA,MAA0B,wCCmB1BM,IAhBI,SAAC,GAMb,IALLC,EAKI,EALJA,YACAC,EAII,EAJJA,aACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,aACGC,EACC,sEACJ,OAAO,2BACFA,GADL,IAEEC,OAAQL,EAXQ,kCAWoBA,EAAcM,EAClDC,aAAcN,EAAeA,EAAaO,MAAM,EAAG,GAAK,MACxDC,WAAYP,EAASA,EAAOQ,KAAI,SAAAC,GAAI,OAAIA,EAAKC,QAAMC,KAAK,MAAQ,GAChEC,MAAsB,GAAfX,EAAoB,Q,mBCd/BY,EAAOC,QAAU,CAAC,aAAe,gCAAgC,YAAc,iC,mBCA/ED,EAAOC,QAAU,CAAC,OAAS,6B,6HCoBZC,EAjBG,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAClB,EAAwCnB,YAAWmB,GAA3Cb,EAAR,EAAQA,OAAQc,EAAhB,EAAgBA,MAAOZ,EAAvB,EAAuBA,aAEvB,OACE,gCACE,qBAAKa,UAAWC,IAAOC,aAAvB,SACE,qBAAKF,UAAU,aAAaG,IAAKlB,EAAQmB,IAAI,mBAE/C,mBAAGJ,UAAWC,IAAOI,YAArB,mBAAsCN,EAAtC,aAAgDZ,S,wBCqBvCmB,eA3BI,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,SAC5B,OACE,oBAAIR,UAAWC,IAAOM,OAAtB,SAA+BA,EAAOjB,KAAI,gBAAEmB,EAAF,EAAEA,GAAOX,EAAT,6BAA2B,oBAAaE,UAAWC,IAAOS,aAA/B,SAC/D,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,GAAD,OAAKC,IAAON,OAAZ,YAAsBE,GAC9BK,MAAO,CACLC,KAAMP,IAJZ,SAQF,cAAC,EAAD,CAAWV,UAAWA,OAToDW,Y,0ICH5EO,E,4MACJF,MAAQ,CACNP,OAAQ,M,8FAGV,4BAAA5C,EAAA,sEACyBU,IAAYG,qBADrC,OACQyC,EADR,OAEE/C,QAAQgD,IAAID,EAASE,SACrBC,KAAKC,SAAS,CAAEd,OAAQU,EAASE,UAHnC,gD,0EAMA,WACE,OACE,+BACE,eAAC,IAAD,WACE,oBAAInB,UAAU,aAAd,4BACCoB,KAAKN,MAAMP,QAAU,cAAC,IAAD,CAAYA,OAAQa,KAAKN,MAAMP,kB,GAhBxCe,aAuBRN","file":"static/js/home-view.d45d4615.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst key = '9c8d439d1b89eedd1730750924a6446b';\n\nconst requestMovieDetails = movieId => {\n  const requestStr = `https://api.themoviedb.org/3/movie/${movieId}?api_key=${key}&append_to_response=reviews,credits`;\n  return request(requestStr);\n};\nconst requestTrendMovies = () => {\n  const requestStr = `https://api.themoviedb.org/3/trending/movie/week?api_key=${key}&language='en-US'`;\n  return request(requestStr);\n};\nconst requestSearchMovie = query => {\n  const requestStr = `https://api.themoviedb.org/3/search/movie?api_key=${key}&page=1&query=${query}&language='en-US'`;\n  return request(requestStr);\n};\n\nconst request = async requestStr => {\n  const fetchResult = await axios\n    .get(requestStr)\n    .then(res => res.data)\n    .catch(console.error);\n  return fetchResult;\n};\n\nconst fetchMovies = {\n  requestMovieDetails,\n  requestTrendMovies,\n  requestSearchMovie,\n};\n\nexport default fetchMovies;\n\n\n\n\n","export default __webpack_public_path__ + \"static/media/default-opt.2c72dc5c.jpg\";","import defaultImg from '../images/default-opt.jpg';\nconst pathBaseUrl = 'https://image.tmdb.org/t/p/w342';\n\nconst formatData = ({\n  poster_path,\n  release_date,\n  genres,\n  vote_average,\n  ...otherInfo\n}) => {\n  return {\n    ...otherInfo,\n    imgUrl: poster_path ? pathBaseUrl + poster_path : defaultImg,\n    release_year: release_date ? release_date.slice(0, 4) : 'N/A',\n    genresList: genres ? genres.map(elem => elem.name).join(', ') : '',\n    score: vote_average * 10 + '%',\n  };\n};\n\nexport default formatData;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie__thumb\":\"MovieCard_movie__thumb__CWN3E\",\"movie__text\":\"MovieCard_movie__text__3SXR9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies\":\"MoviesList_movies__3_ICe\"};","import PropTypes from 'prop-types';\nimport styles from './MovieCard.module.css';\nimport formatData from '../../services/formatData';\n\nconst MovieCard = ({movieInfo}) => {\n  const { imgUrl, title, release_year } = formatData(movieInfo);\n\n  return (\n    <div>\n      <div className={styles.movie__thumb}>\n        <img className=\"movie__img\" src={imgUrl} alt=\"movie poster\" />\n      </div>\n      <p className={styles.movie__text}>{`${title}, ${release_year}`}</p>\n    </div>\n  );\n};\n\nMovieCard.propTypes = {\n  movieInfo: PropTypes.object.isRequired,\n};\n\nexport default MovieCard;","import { Link, withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport MovieCard from '../MovieCard';\nimport routes from '../../routes';\nimport styles from './MoviesList.module.css';\n\nconst MoviesList = ({ movies, location}) => {\n  return (\n    <ul className={styles.movies}>{movies.map(({id, ...movieInfo}) => (  <li key={id} className={styles.movies__item}>\n          <Link\n            to={{\n              pathname: `${routes.movies}/${id}`,\n              state: {\n                from: location,\n              },\n            }}\n      >\n        <MovieCard movieInfo={movieInfo} />\n      </Link>\n    </li>\n    ))}\n    </ul>\n  )\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default withRouter(MoviesList);","import { Component } from 'react';\nimport Container from '../components/Container';\nimport MoviesList from '../components/MoviesList';\nimport fetchMovies from '../services/fetchMovies';\n\nclass HomeView extends Component {\n  state = {\n    movies: null,\n  };\n\n  async componentDidMount() {\n    const response = await fetchMovies.requestTrendMovies();\n    console.log(response.results);\n    this.setState({ movies: response.results });\n  }\n\n  render() {\n    return (\n      <main>\n        <Container>\n          <h1 className=\"view-title\">Trending today</h1>\n          {this.state.movies && <MoviesList movies={this.state.movies} />}\n        </Container>\n      </main>\n    )\n  }\n}\n\nexport default HomeView;"],"sourceRoot":""}